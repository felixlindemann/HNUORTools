get.ReliabilitätsSample<-function(n , min , max , seed ){#
	set.seed(seed)				# Wähle eine bestimmte Zufallszahlenliste aus --> Für Reproduzierbarkeit#
	x<-sample(min:max, n)	# Ziehe eine Stichproben von n Elementen#
	return (x[order(x)])	# gib eine sortierte Liste zurück#
}#
#
n = 30#
min = 1#
max = 576#
seed = 0#
#
get.ReliabilitätsSample(n,min,seed)#
#
# Ergebnisse#
#   8  35  70 100 116 117 118 148 153 210 212 213 214 216 279 329 357#
# 361 376 387 402 432 433 476 513 517 519 520 538 554#
#
max = 584 #
#
get.ReliabilitätsSample(n,min,seed)
get.ReliabilitätsSample<-function(n , min , max , seed ){#
	set.seed(seed)				# Wähle eine bestimmte Zufallszahlenliste aus --> Für Reproduzierbarkeit#
	x<-sample(min:max, n)	# Ziehe eine Stichproben von n Elementen#
	return (x[order(x)])	# gib eine sortierte Liste zurück#
}#
#
n <- 30#
min <- 1#
max <- 576#
seed <- 0#
#
get.ReliabilitätsSample(n,min,seed)#
#
# Ergebnisse#
#   8  35  70 100 116 117 118 148 153 210 212 213 214 216 279 329 357#
# 361 376 387 402 432 433 476 513 517 519 520 538 554#
#
max <- 584 #
#
get.ReliabilitätsSample(n,min,seed)
sample(1:49,6)
get.ReliabilitätsSample<-function(n , min , max , seed ){#
	set.seed(seed)				# Wähle eine bestimmte Zufallszahlenliste aus --> Für Reproduzierbarkeit#
	x<-sample(min:max, n)	# Ziehe eine Stichproben von n Elementen#
	return (x[order(x)])	# gib eine sortierte Liste zurück#
}#
#
n <- 30#
min <- 1#
max <- 576#
seed <- 0#
#
get.ReliabilitätsSample(n,max,min,seed)#
#
# Ergebnisse#
#   8  35  70 100 116 117 118 148 153 210 212 213 214 216 279 329 357#
# 361 376 387 402 432 433 476 513 517 519 520 538 554#
#
max <- 584 #
#
get.ReliabilitätsSample(n,max,min,seed)
sample(1:49,6)
library(devtools)#
install_github("RDemo", "felixlindemann") #
#
library(RDemo)#
foo#
foo()
install_github("RDemo", "felixlindemann") #
#
library(RDemo)#
foo#
foo(7)
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=paste("Node", -1), # Fake Random ID#
    		x =runif(1,0,100), # random x #
    		y =runif(1,0,100), # random y#
    		label = NA #
    	)#
    ), # Defines default value (optional)#
    validity=function(object) { #
    	# Can be defined in a separate step using setValidity#
    		   if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if(class(object@x)!="numeric") {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if(class(object@y)!="numeric") {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if(length(object@x)!=1){ #
           	return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if(length(object@y)!=1){ #
           	return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
    }#
)#
setMethod("initialize", "HNUNode", function(.Object, x,y,label="",id="") { #
    .Object@x  <- x#
    .Object@y  <- y#
    .Object@id  <- id#
    .Object@label  <- label#
#
    if(validObject(.Object)) {return(.Object )}#
})
setClass(#
	Class="HNUCustomer",#
    representation=representation( #
    	demand="numeric",#
        location="HNUNode"#
    ),#
    prototype=prototype(#
    	list(#
    		demand=NA,#
            location=NA#
    	)#
    ), # Defines default value (optional)#
    validity=function(obj) { #
    	# Can be defined in a separate step using setValidity#
        if( sum(is.null(obj@demand)) + sum( is.na(obj@demand)) > 0 ) {#
            return(paste("Error with value demand: demand is not initialized", class(obj@demand)))#
        } else if(class(obj@demand)!="numeric") {#
            return(paste("Error with value demand: expected numeric datatype, but obtained", class(obj@demand))) #
        } else if(length(obj@demand)!=1){ #
            return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
                  length(obj@demand), " --> no arrays supported here"))         #
        } else if(obj@demand<0){ #
            return(paste("Error with value demand: expected is a non negative value, but obtained", (obj@demand), #
                         " --> no negative values supported here"))         #
        } else if( !validObject(obj@location)){ #
            return(paste("Error with location: ", validObject(obj@location)))#
        } else{ #
            return(TRUE)#
        }#
    }#
) #
setMethod("initialize", "HNUCustomer", function(obj, x,y,demand,label="",id="") { #
#
    obj@location <-  new("HNUNode", x=x, y=y, label=label, id=id)#
    obj@demand <- demand#
     if(validObject(obj)) {return(obj )}#
})
setClass(#
	Class="HNUCustomer",#
    representation=representation( #
    	demand="numeric",#
        location="HNUNode"#
    ),#
    prototype=prototype(#
    	list(#
    		demand=NA,#
            location=NA#
    	)#
    ), # Defines default value (optional)#
    validity=function(object) { #
    	# Can be defined in a separate step using setValidity#
        if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
            return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
        } else if(class(object@demand)!="numeric") {#
            return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
        } else if(length(object@demand)!=1){ #
            return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
                  length(object@demand), " --> no arrays supported here"))         #
        } else if(object@demand<0){ #
            return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                         " --> no negative values supported here"))         #
        } else if( !validObject(object@location)){ #
            return(paste("Error with location: ", validObject(object@location)))#
        } else{ #
            return(TRUE)#
        }#
    }#
) #
setMethod("initialize", "HNUCustomer", function(object, x,y,demand,label="",id="") { #
#
    object@location <-  new("HNUNode", x=x, y=y, label=label, id=id)#
    object@demand <- demand#
     if(validObject(object)) {return(object )}#
})
setClass(#
	Class="HNUCustomer",#
    representation=representation( #
    	demand="numeric",#
        location="HNUNode"#
    ),#
    prototype=prototype(#
    	list(#
    		demand=NA,#
            location=NA#
    	)#
    ), # Defines default value (optional)#
    validity=function(object) { #
    	# Can be defined in a separate step using setValidity#
        if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
            return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
        } else if(class(object@demand)!="numeric") {#
            return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
        } else if(length(object@demand)!=1){ #
            return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
                  length(object@demand), " --> no arrays supported here"))         #
        } else if(object@demand<0){ #
            return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                         " --> no negative values supported here"))         #
        } else if( !validObject(object@location)){ #
            return(paste("Error with location: ", validObject(object@location)))#
        } else{ #
            return(TRUE)#
        }#
    }#
) #
setMethod("initialize", "HNUCustomer", function(.Object, x,y,demand,label="",id="") { #
#
    .Object@location <-  new("HNUNode", x=x, y=y, label=label, id=id)#
    .Object@demand <- demand#
     if(validObject(.Object)) {return(.Object )}#
})
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=paste("Node", -1), # Fake Random ID#
    		x =runif(1,0,100), # random x #
    		y =runif(1,0,100), # random y#
    		label = NA #
    	)#
    ), # Defines default value (optional)#
    validity=function(object) { #
    	# Can be defined in a separate step using setValidity#
    		   if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if(class(object@x)!="numeric") {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if(class(object@y)!="numeric") {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if(length(object@x)!=1){ #
           	return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if(length(object@y)!=1){ #
           	return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
    }#
)#
setMethod("initialize", "HNUNode", function(.Object, x,y,label="",id="") { #
    .Object@x  <- x#
    .Object@y  <- y#
    .Object@id  <- id#
    .Object@label  <- label#
#
    if(validObject(.Object)) {return(.Object )}#
})
should work fine#
k1 <- new("HNUCustomer", x=12, y=10, label="myNode", id="N0001", demand = 30)#
k1#
# should raise error#
k2 <- new("HNUCustomer", x=c(12,12), y=c(10,10), label="myNode.error", id="N000.Error", demand = 30)#
k3 <- new("HNUCustomer", x=12, y=10, label="myNode.error", id="N0001.error", demand = -30)
should work fine#
obj1 <- new("HNUNode", x=12, y=10, label="myNode", id="N0001")#
obj1#
#
# should work fine#
k1 <- new("HNUCustomer", location=obj1, demand = 30)#
k1
should work fine#
k1 <- new("HNUCustomer", x=12, y=10, label="myNode", id="N0001", demand = 30)#
k1#
# should raise error#
k2 <- new("HNUCustomer", x=c(12,12), y=c(10,10), label="myNode.error", id="N000.Error", demand = 30)#
k3 <- new("HNUCustomer", x=12, y=10, label="myNode.error", id="N0001.error", demand = -30)#
#
# should work fine#
obj1 <- new("HNUNode", x=12, y=10, label="myNode", id="N0001")#
obj1#
#
# should work fine#
k4 <- new("HNUCustomer", location=obj1, demand = 30)#
k4
?missing
class(obj1)
class(obj1)[1]
class(obj1)[1] == "HNUNode"
try
?trycatch
?error
?fail
try
tracatch
trycatch
? tryCatch
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=paste("Node", -1), # Fake Random ID#
    		x =runif(1,0,100), # random x #
    		y =runif(1,0,100), # random y#
    		label = NA #
    	)#
    ), # Defines default value (optional)#
    validity=function(object) { #
    	# Can be defined in a separate step using setValidity#
    		   if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if(class(object@x)!="numeric") {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if(class(object@y)!="numeric") {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if(length(object@x)!=1){ #
           	return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if(length(object@y)!=1){ #
           	return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
    }#
)#
setMethod("initialize", "HNUNode", function(.Object, x,y,label="",id="") { #
    if(missing(x)){x<- runif(1,0,100)} # random x #
    if(missing(y)){y<- runif(1,0,100)} # random x #
    if(missing(id)){id<-paste("Node", sample(1:100000,1))}#
    if(missing(label)){label<-id}#
    .Object@x  <- x#
    .Object@y  <- y#
    .Object@id  <- id#
    .Object@label  <- label#
#
    if(validObject(.Object)) {return(.Object )}#
})
setClass(#
	Class="HNUCustomer",#
    representation=representation( #
    	demand="numeric",#
        location="HNUNode"#
    ),#
    prototype=prototype(#
    	list(#
    		demand=NA,#
            location=NA#
    	)#
    ), # Defines default value (optional)#
    validity=function(object) { #
    	# Can be defined in a separate step using setValidity#
        if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
            return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
        } else if(class(object@demand)!="numeric") {#
            return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
        } else if(length(object@demand)!=1){ #
            return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
                  length(object@demand), " --> no arrays supported here"))         #
        } else if(object@demand<0){ #
            return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                         " --> no negative values supported here"))         #
        } else if( !validObject(object@location)){ #
            return(paste("Error with location: ", validObject(object@location)))#
        } else{ #
            return(TRUE)#
        }#
    }#
) #
setMethod("initialize", "HNUCustomer", function(.Object, location,x,y,demand,label="",id="") { #
    if(missing(location)){#
        .Object@location <-  new("HNUNode", x=x, y=y, label=label, id=id)        #
    } else{#
        if(class(location)[1] == "HNUNode"){#
            .Object@location <- location#
        } else{#
            simpleError(paste("Error with location. Object expected of type HNUNode, but obtained", class(location)))#
        }#
    }#
    .Object@demand <- demand#
     if(validObject(.Object)) {return(.Object )}#
})
should work fine#
k1 <- new("HNUCustomer", x=12, y=10, label="myNode", id="N0001", demand = 30)#
k1#
# should raise error#
k2 <- new("HNUCustomer", x=c(12,12), y=c(10,10), label="myNode.error", id="N000.Error", demand = 30)#
k3 <- new("HNUCustomer", x=12, y=10, label="myNode.error", id="N0001.error", demand = -30)#
#
# should work fine#
obj1 <- new("HNUNode", x=12, y=10, label="myNode", id="N0001")#
obj1#
#
# should work fine#
k4 <- new("HNUCustomer", location=obj1, demand = 30)#
k4
?numeric
x<-2*10^9
x
class(k4)
class(k4)=="HNUCustomer"
class(k4)=="HNUCustome"
class(k4)=="HNUCustomer"
setRefClass
?setRefClass
mEdit <- setRefClass("mEdit",#
      fields = list( data = "matrix",#
        edits = "list"),#
      methods = list(#
     edit = function(i, j, value) {#
       ## the following string documents the edit method#
       'Replaces the range [i, j] of the#
        object by value.#
        '#
         backup <-#
             list(i, j, data[i,j])#
         data[i,j] <<- value#
         edits <<- c(edits, list(backup))#
         invisible(value)#
     },#
     undo = function() {#
       'Undoes the last edit() operation#
        and update the edits field accordingly.#
        '#
         prev <- edits#
         if(length(prev)) prev <- prev[[length(prev)]]#
         else stop("No more edits to undo")#
         edit(prev[[1]], prev[[2]], prev[[3]])#
         ## trim the edits list#
         length(edits) <<- length(edits) - 2#
         invisible(prev)#
     },#
     show = function() {#
       'Method for automatically printing matrix editors'#
       cat("Reference matrix editor object of class",#
          classLabel(class(.self)), "\n")#
       cat("Data: \n")#
       methods::show(data)#
       cat("Undo list is of length", length(edits), "\n")#
     }#
     ))#
#
xMat <- matrix(1:12,4,3)#
xx <- mEdit$new(data = xMat)#
xx$edit(2, 2, 0)#
xx#
xx$undo()#
mEdit$help("undo")#
stopifnot(all.equal(xx$data, xMat))
mEdit$help("undo")
HNU.Knoten <- setRefClass("HNU.Knoten",#
  fields = list( #
    id    = "character", #
    x     = "numeric",#
    y     = "numeric",#
    label = "character"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    calcDistance = function(andererKnoten, Kostensatz = 1) {#
      'Berechnet die Luftlinienentfernung zwischen zwei Knoten. Wenn Kostensatz <> 1 kann die Luftlinienentfernung auch als Kosten für diee Fahrt von A nach B interpretiert werden.'#
      if(ismissing(andererKnoten)){#
        simpleError(paste("Fehler. Das Argument 'andererKnoten' fehlt. Die Berechnung ist daher nicht möglich."))#
      }#
      dist <- sqrt((x - andererKnoten$x)^2+(y - andererKnoten$y )^2) #
#
      #'Method for automatically printing matrix editors'#
      #cat("Reference matrix editor object of class",#
      #classLabel(class(.self)), "\n")#
      #cat("Data: \n")#
      #methods::show(data)#
      #cat("Undo list is of length", length(edits), "\n")#
      ##
      return (dist * Kostensatz)#
    }#
  )#
)#
#
k1 <- HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1"#
)#
k2 <- HNU.Knoten$new(#
  id = "k2",#
  x = 12,#
  y = 13,#
  label = "Kunde 2"#
)#
#
k1$calcDistance(k2)
HNU.Knoten <- setRefClass("HNU.Knoten",#
  fields = list( #
    id    = "character", #
    x     = "numeric",#
    y     = "numeric",#
    label = "character"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    calcDistance = function(andererKnoten, Kostensatz = 1) {#
      'Berechnet die Luftlinienentfernung zwischen zwei Knoten. Wenn Kostensatz <> 1 kann die Luftlinienentfernung auch als Kosten für diee Fahrt von A nach B interpretiert werden.'#
      if(missing(andererKnoten)){#
        simpleError(paste("Fehler. Das Argument 'andererKnoten' fehlt. Die Berechnung ist daher nicht möglich."))#
      }#
      dist <- sqrt((x - andererKnoten$x)^2+(y - andererKnoten$y )^2) #
#
      #'Method for automatically printing matrix editors'#
      #cat("Reference matrix editor object of class",#
      #classLabel(class(.self)), "\n")#
      #cat("Data: \n")#
      #methods::show(data)#
      #cat("Undo list is of length", length(edits), "\n")#
      ##
      return (dist * Kostensatz)#
    }#
  )#
)#
#
k1 <- HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1"#
)#
k2 <- HNU.Knoten$new(#
  id = "k2",#
  x = 12,#
  y = 13,#
  label = "Kunde 2"#
)#
#
k1$calcDistance(k2)
wurzel()
sqrt(2^2 + 3^2)
HNU.Kunde <- setRefClass("HNU.Kunde",#
  fields = list( #
    Nachfrage = "numeric"#
  ),#
  contains = "HNU.Knoten",#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    }#
  )#
)
HNU.Kunde$new(Nachfrage=10)
class(TRUE)
HNU.Kunde <- setRefClass("HNU.Kunde",#
  fields = list( #
    Nachfrage = "numeric",#
    isDummy = "logical"#
  ),#
  contains = "HNU.Knoten",#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    }#
  )#
)#
k1 <- HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1",#
  Nachfrage = 10 #
)#
k2 <- HNU.Knoten$new(#
  id = "k2",#
  x = 12,#
  y = 13,#
  label = "Kunde 2",#
  Nachfrage = 20#
)#
#
k1$calcDistance(k2)
HNU.Kunde <- setRefClass("HNU.Kunde",#
  fields = list( #
    Nachfrage = "numeric",#
    isDummy = "logical"#
  ),#
  contains = "HNU.Knoten",#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    }#
  )#
)#
k1 <- HNU.Kunde$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1",#
  Nachfrage = 10 #
)#
k2 <- HNU.Kunde$new(#
  id = "k2",#
  x = 12,#
  y = 13,#
  label = "Kunde 2",#
  Nachfrage = 20#
)#
#
k1$calcDistance(k2)
k1
k1$Nachfrage
HNU.Lager <- setRefClass("HNU.Lager",#
  fields = list( #
    Angebot   = "numeric",#
    FixKosten = "numeric"#
    isDummy   = "logical"#
  ),#
  contains = "HNU.Knoten",#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    }#
  )#
)#
l1 <- HNU.Lager$new(#
  id = "l1",#
  x = 10,#
  y = 10,#
  label = "Lager 1",#
  Angebot = 10 #
)#
l2 <- HNU.Lager$new(#
  id = "l2",#
  x = 12,#
  y = 13,#
  label = "Lager 2",#
  Angebot = 20#
)#
#
l1$calcDistance(l2)
HNU.Lager <- setRefClass("HNU.Lager",#
  fields = list( #
    Angebot   = "numeric",#
    FixKosten = "numeric",#
    isDummy   = "logical"#
  ),#
  contains = "HNU.Knoten",#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    }#
  )#
)#
l1 <- HNU.Lager$new(#
  id = "l1",#
  x = 10,#
  y = 10,#
  label = "Lager 1",#
  Angebot = 10 #
)#
l2 <- HNU.Lager$new(#
  id = "l2",#
  x = 12,#
  y = 13,#
  label = "Lager 2",#
  Angebot = 20#
)#
#
l1$calcDistance(l2)
HNU.Kante <- setRefClass("HNU.Kante",#
  fields = list( #
    id    = "character", #
    from  = "HNU.Knoten",#
    to    = "HNU.Knoten",#
    distance = "numeric",#
    oneWay = "logical"#
    cost = "numeric"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    setDistance = function(Kostensatz = 1){#
      distance <- from$calcDistance(to)#
      cost <- distance * Kostensatz#
    } #
  )#
)#
#
Kostensatz <- 1#
k1 <- HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1"#
)#
k2 <- HNU.Knoten$new(#
  id = "k2",#
  x = 12,#
  y = 13,#
  label = "Kunde 2"#
) #
k3 <- HNU.Knoten$new(#
  id = "k3",#
  x = 8,#
  y = 6,#
  label = "Kunde 3"#
)  #
k4 <- HNU.Knoten$new(#
  id = "k4",#
  x = 7,#
  y = 10,#
  label = "Kunde 4"#
)#
k5 <- HNU.Knoten$new(#
  id = "k5",#
  x = 12,#
  y = 4,#
  label = "Kunde 5"#
) #
k6 <- HNU.Knoten$new(#
  id = "k6",#
  x = 0,#
  y = 0,#
  label = "Kunde 6"#
) #
#
l1 <- Kante$new(#
  from = k1,#
  to   = k2,#
  oneWay = FALSE#
)#
#
l2 <- Kante$new(#
  from = k1,#
  to   = k3,#
  oneWay = FALSE#
)#
l3 <- Kante$new(#
  from = k2,#
  to   = k3,#
  oneWay = FALSE#
)#
l4 <- Kante$new(#
  from = k2,#
  to   = k4,#
  oneWay = FALSE#
)#
l5 <- Kante$new(#
  from = k3,#
  to   = k4,#
  oneWay = FALSE#
)#
l6 <- Kante$new(#
  from = k4,#
  to   = k5,#
  oneWay = FALSE#
)#
#
l1$setDistance(Kostensatz)#
l2$setDistance(Kostensatz)#
l3$setDistance(Kostensatz)#
l4$setDistance(Kostensatz)#
l5$setDistance(Kostensatz)#
l6$setDistance(Kostensatz)
HNU.Kante <- setRefClass("HNU.Kante",#
  fields = list( #
    id    = "character", #
    from  = "HNU.Knoten",#
    to    = "HNU.Knoten",#
    distance = "numeric",#
    oneWay = "logical"#
    cost = "numeric"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    setDistance = function(Kostensatz = 1){#
      distance <- from$calcDistance(to)#
      cost <- distance * Kostensatz#
    } #
  )#
)#
#
Kostensatz <- 1#
k1 <- HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1"#
)#
k2 <- HNU.Knoten$new(#
  id = "k2",#
  x = 12,#
  y = 13,#
  label = "Kunde 2"#
) #
k3 <- HNU.Knoten$new(#
  id = "k3",#
  x = 8,#
  y = 6,#
  label = "Kunde 3"#
)  #
k4 <- HNU.Knoten$new(#
  id = "k4",#
  x = 7,#
  y = 10,#
  label = "Kunde 4"#
)#
k5 <- HNU.Knoten$new(#
  id = "k5",#
  x = 12,#
  y = 4,#
  label = "Kunde 5"#
) #
k6 <- HNU.Knoten$new(#
  id = "k6",#
  x = 0,#
  y = 0,#
  label = "Kunde 6"#
) #
#
l1 <- HNU.Kante$new(#
  from = k1,#
  to   = k2,#
  oneWay = FALSE#
)#
#
l2 <- HNU.Kante$new(#
  from = k1,#
  to   = k3,#
  oneWay = FALSE#
)#
l3 <- HNU.Kante$new(#
  from = k2,#
  to   = k3,#
  oneWay = FALSE#
)#
l4 <- HNU.Kante$new(#
  from = k2,#
  to   = k4,#
  oneWay = FALSE#
)#
l5 <- HNU.Kante$new(#
  from = k3,#
  to   = k4,#
  oneWay = FALSE#
)#
l6 <- HNU.Kante$new(#
  from = k4,#
  to   = k5,#
  oneWay = FALSE#
)#
#
l1$setDistance(Kostensatz)#
l2$setDistance(Kostensatz)#
l3$setDistance(Kostensatz)#
l4$setDistance(Kostensatz)#
l5$setDistance(Kostensatz)#
l6$setDistance(Kostensatz)
HNU.Kante <- setRefClass("HNU.Kante",#
  fields = list( #
    id    = "character", #
    from  = "HNU.Knoten",#
    to    = "HNU.Knoten",#
    distance = "numeric",#
    oneWay = "logical",#
    cost = "numeric"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    setDistance = function(Kostensatz = 1){#
      distance <- from$calcDistance(to)#
      cost <- distance * Kostensatz#
    } #
  )#
)#
#
Kostensatz <- 1#
k1 <- HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1"#
)#
k2 <- HNU.Knoten$new(#
  id = "k2",#
  x = 12,#
  y = 13,#
  label = "Kunde 2"#
) #
k3 <- HNU.Knoten$new(#
  id = "k3",#
  x = 8,#
  y = 6,#
  label = "Kunde 3"#
)  #
k4 <- HNU.Knoten$new(#
  id = "k4",#
  x = 7,#
  y = 10,#
  label = "Kunde 4"#
)#
k5 <- HNU.Knoten$new(#
  id = "k5",#
  x = 12,#
  y = 4,#
  label = "Kunde 5"#
) #
k6 <- HNU.Knoten$new(#
  id = "k6",#
  x = 0,#
  y = 0,#
  label = "Kunde 6"#
) #
#
l1 <- HNU.Kante$new(#
  from = k1,#
  to   = k2,#
  oneWay = FALSE#
)#
#
l2 <- HNU.Kante$new(#
  from = k1,#
  to   = k3,#
  oneWay = FALSE#
)#
l3 <- HNU.Kante$new(#
  from = k2,#
  to   = k3,#
  oneWay = FALSE#
)#
l4 <- HNU.Kante$new(#
  from = k2,#
  to   = k4,#
  oneWay = FALSE#
)#
l5 <- HNU.Kante$new(#
  from = k3,#
  to   = k4,#
  oneWay = FALSE#
)#
l6 <- HNU.Kante$new(#
  from = k4,#
  to   = k5,#
  oneWay = FALSE#
)#
#
l1$setDistance(Kostensatz)#
l2$setDistance(Kostensatz)#
l3$setDistance(Kostensatz)#
l4$setDistance(Kostensatz)#
l5$setDistance(Kostensatz)#
l6$setDistance(Kostensatz)
l1
Knoten <- as.list(c(k1,k2,k3,k4,k5,k6))
Knoten
length(Knoten)
Knoten[1]
list()
Knoten <- NULL#
Knoten <- rbind(#
  Knoten, #
  HNU.Knoten$new(#
    id = "k1",#
    x = 10,#
    y = 10,#
    label = "Kunde 1"#
  )#
)
Knoten <- NULL#
Knoten[1] <- HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1"  #
)
Knoten <- list()#
Knoten[1] <- HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1"  #
)
Knoten
Knoten <- list()#
Knoten <- rbind(Knoten, HNU.Knoten$new(#
  id = "k1",#
  x = 10,#
  y = 10,#
  label = "Kunde 1"  #
)#
)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    addKnoten = function(knoten){#
      if(missing(Knoten) | is.null(Knoten) | is.na(Knoten)){#
        Knoten <- list()#
      }#
      Knoten[[length(Knoten)+1]] <- knoten #
    },#
    addKunde = function(kunde){#
      if(missing(Kunden) | is.null(Kunden) | is.na(Kunden)){#
        Kunden <- list()#
      }#
      Kunden[[length(Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(Lager) | is.null(Lager) | is.na(Lager)){#
        Lager <- list()#
      }#
      Lager[[length(Lager)+1]] <- lager #
    },#
    plot = function(xlim, ylim){#
#
    },#
    draw.customer = function(#
      customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$name, cex=font.cex,col=font.col)#
    },#
    draw.warehouse <- function(#
      warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$name, cex=font.cex,col=font.col)#
    }#
  )#
)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    addKnoten = function(knoten){#
      if(missing(.self$Knoten) | is.null(.self$Knoten) | is.na(.self$Knoten)){#
        .self$Knoten <- list()#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKunde = function(kunde){#
      if(missing(.self$Kunden) | is.null(.self$Kunden) | is.na(.self$Kunden)){#
        .self$Kunden <- list()#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(.self$Lager) | is.null(.self$Lager) | is.na(.self$Lager)){#
        .self$Lager <- list()#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    },#
    plot = function(xlim, ylim){#
#
    },#
    draw.customer = function(#
      customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$name, cex=font.cex,col=font.col)#
    },#
    draw.warehouse <- function(#
      warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$name, cex=font.cex,col=font.col)#
    }#
  )#
)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    addKnoten = function(knoten){#
      if(missing(.self$Knoten) | is.null(.self$Knoten) | is.na(.self$Knoten)){#
        .self$Knoten <- list()#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKunde = function(kunde){#
      if(missing(.self$Kunden) | is.null(.self$Kunden) | is.na(.self$Kunden)){#
        .self$Kunden <- list()#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(.self$Lager) | is.null(.self$Lager) | is.na(.self$Lager)){#
        .self$Lager <- list()#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse <- function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    addKnoten = function(knoten){#
      if(missing(.self$Knoten) | is.null(.self$Knoten) | is.na(.self$Knoten)){#
        .self$Knoten <- list()#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKunde = function(kunde){#
      if(missing(.self$Kunden) | is.null(.self$Kunden) | is.na(.self$Kunden)){#
        .self$Kunden <- list()#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(.self$Lager) | is.null(.self$Lager) | is.na(.self$Lager)){#
        .self$Lager <- list()#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)
HNU.GeografischeSituation$new()
set.seed(2)
runif(1,0,100)
Knoten
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(.self$Knoten) | is.null(.self$Knoten) | is.na(.self$Knoten)){#
        .self$Knoten <- list()#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKunde = function(kunde){#
      if(missing(.self$Kunden) | is.null(.self$Kunden) | is.na(.self$Kunden)){#
        .self$Kunden <- list()#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(.self$Lager) | is.null(.self$Lager) | is.na(.self$Lager)){#
        .self$Lager <- list()#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
HNU.GeografischeSituation$new()
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(10)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(is.null(.self$Knoten) | is.na(.self$Knoten)){#
        .self$Knoten <- list()#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if( is.null(.self$Kunden) | is.na(.self$Kunden)){#
        .self$Kunden <- list()#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if( is.null(.self$Lager) | is.na(.self$Lager)){#
        .self$Lager <- list()#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(10)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(10)
x$Knoten
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(from,to,Kostensatz=1,oneway=FALSE){#
      if(missing(from)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(to)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[from],#
        to   = .self$Knoten[to],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[from],#
        to   = .self$Knoten[to],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
x$Knoten
x$Knoten[1]
x$Knoten[[1]]
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[from]],#
        to   = .self$Knoten[[to]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
x$Kanten
k<-x$Knoten
k
k<-x$Knoten$
x
k<-x$Knoten$x
k<-x$Knoten$$x
k<-x$Knoten[]$x
k<-x$Knoten["x",]
k
k<-x$Knoten
k
k$x
as.list(K)
as.list(k)
k[["x,"]]
k[["x",]]
k[[,x]]
k[[],x]
k[[],"x"]
k["x",[]]
k["x"]
k["x",]
k[["x"]]
k[[]]
k[[id]]
k[["id"]]
k[[]]$id
k[]$id
k[][]$id
k
class(k)
k$"a"
k$"x"
length(k)
lapply(k)
k[1:5]$x
k[1:5]
k[1:2]
k[1:2][[]]
k[1:2][]
k[1:2][]["x"]
k[1:2][][["x"]]
k[1]
k[[1]]
k[[1]]$x
k[[]]$x
k[[1:5]]$x
should work fine#
k1 <- new("HNUCustomer", x=12, y=10, label="myNode", id="N0001", demand = 30)#
k1
class(k1)
as.list(k1)
x
x$Knoten
x$Knoten[[1]]
x$Knoten[[]]
x$Knoten[[,"x"]]
x$Knoten[[,"x"]]()
try(throw("Division by zero."));
x$Knoten[[,"x"]]()
x$Knoten[["x"]]()
x$Knoten[["x"]]
x$Knoten[[1:4]]$x
sapply(x$Knoten, function(x){as.numeric(x)})
sapply(x$Knoten, function(x){x})
sapply(x$Knoten, function(x){x$x})
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plot = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y))#
      }#
      plot(x,y,xlim = xlim, ylim = ylim,xlab=xlab,ylab=ylab,main=main,pch=20)#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plot = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,xlim = xlim, ylim = ylim,xlab=xlab,ylab=ylab,main=main,pch=20)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
x$plot()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plot = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      methods::plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
x$plot()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      base::plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plot()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      base::plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
#
      text(x,y, sapply(.self$Knoten, function(o){o$label}), cex=1,col=1)#
#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=1,col=1)#
#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
?pch
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
      points(x,y,pch = 1 , cex=2)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
?pch
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
      points(x,y,pch = 21 , cex=2)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        a <- c(l$from$x, l$to$x)#
        b <- c(l$from$y, l$to$y)#
        lines(a,b,lty=1)#
      }#
#
      points(x,y,pch = 21 , cex=2)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
?pch
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        a <- c(l$from$x, l$to$x)#
        b <- c(l$from$y, l$to$y)#
        lines(a,b,lty=1)#
      }#
#
      points(x,y,pch = 21,bg = "white" , cex=2)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        a <- c(l$from$x, l$to$x)#
        b <- c(l$from$y, l$to$y)#
        lines(a,b,lty=1)#
      }#
#
      points(x,y,pch = 21,bg = "white" , cex=3)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        a <- c(l$from$x, l$to$x)#
        b <- c(l$from$y, l$to$y)#
        lines(a,b,lty=1)#
      }#
#
      points(x,y,pch = 21,bg = "white" , cex=3)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.6,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
character()
numeric(0)
.ls.objects()
ls
ls.objects()
ls
ls()
?ls
myfunc <- function() {y <- 1; ls()}#
myfunc()                # shows "y"
objects()
ls()
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
#
    # Can be defined in a separate step using setValidity#
        if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
            return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
        } else if(class(object@demand)!="numeric") {#
            return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
        } else if(length(object@demand)!=1){ #
            return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
                  length(object@demand), " --> no arrays supported here"))         #
        } else if(object@demand<0){ #
            return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                         " --> no negative values supported here"))         #
        } else{ #
            return(TRUE)#
        }#
    }#
#
}#
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=character(),#
            x = numeric(),#
            y = numeric(),#
            label = character() #
    	)#
    )#
)#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=character(),#
            x = numeric(),#
            y = numeric(),#
            label = character() #
    	)#
    )#
)#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id)){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x)){#
                x<-runif(1,0,100)#
            }#
            if(missing(y)){#
                y<-runif(1,0,100)#
            }#
            if(missing(label)){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o)#
            return(o)#
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w))#
            return NA           #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=character(),#
            x = numeric(),#
            y = numeric(),#
            label = character() #
    	)#
    )#
)#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id)){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x)){#
                x<-runif(1,0,100)#
            }#
            if(missing(y)){#
                y<-runif(1,0,100)#
            }#
            if(missing(label)){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
x<-HNUNode()
x
x<-HNUNode(x=20)
x
is.HNUNode(x)
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- sample(1:1000,1) #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = n@demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
numeric()
missing(numeric())
y<-numeric()
missing(y)
length(y)
length(y) ==0
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- sample(1:1000,1) #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = n@demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- sample(1:1000,1) #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- as.numeric( sample(1:1000,1) )#
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 )#
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUWarehouse()
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, fixcosts = fixcosts, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUWarehouse()
x<-HNUWarehouse()
as.dataframe()
as data.frame(x)
as.data.frame(x)
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        data.frame(#
            id      = from@id,#
            label   = from@label, #
            x       = from@x, #
            y       = from@y#
        )#
    }#
)#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
x<- HNUNode()
x
as(x,"data.frame")
_id <- 2
d<-as(x,"data.frame")
d$a
ifnull(d$a)
?ifnull
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)#
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        tryCatch(#
        { #
            tmp.id = character()#
            tmp.label = character()#
            tmp.x = numeric()#
            tmp.y = numeric()#
#
            if(!is.null(from$id)){#
                tmp.id <- from$id#
            }#
            if(!is.null(from$label)){#
                tmp.label <- from$label#
            }#
            if(!is.null(from$x)){#
                tmp.x <- from$x#
            }#
            if(!is.null(from$y)){#
                tmp.y <- from$y#
            }#
#
            o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
        }, warning = function(w) {#
            cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    }#
)#
#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        tryCatch(#
        { #
            tmp.id = character()#
            tmp.label = character()#
            tmp.x = numeric()#
            tmp.y = numeric()#
#
            if(!is.null(from$id)){#
                tmp.id <- from$id#
            }#
            if(!is.null(from$label)){#
                tmp.label <- from$label#
            }#
            if(!is.null(from$x)){#
                tmp.x <- from$x#
            }#
            if(!is.null(from$y)){#
                tmp.y <- from$y#
            }#
#
            o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
        }, warning = function(w) {#
            cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    }#
)
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)#
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        o <- NA#
        tryCatch(#
            { #
                tmp.id = character()#
                tmp.label = character()#
                tmp.x = numeric()#
                tmp.y = numeric()#
#
                if(!is.null(from$id)){#
                    tmp.id <- from$id#
                }#
                if(!is.null(from$label)){#
                    tmp.label <- from$label#
                }#
                if(!is.null(from$x)){#
                    tmp.x <- from$x#
                }#
                if(!is.null(from$y)){#
                    tmp.y <- from$y#
                }#
#
                o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
            }, warning = function(w) {#
                cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(o)#
            } #
        )#
    }#
)#
#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
require("HNUORToolsForRProject")
require(OpenMx)#
data(demoOneFactor)#
manifests <- names(demoOneFactor)#
latents <- c("G")#
factorModel <- mxModel("One Factor",#
      type="RAM",#
      manifestVars = manifests,#
      latentVars = latents,#
      mxPath(from=latents, to=manifests),#
      mxPath(from=manifests, arrows=2),#
      mxPath(from=latents, arrows=2,#
            free=FALSE, values=1.0),#
      mxData(cov(demoOneFactor), type="cov",#
            numObs=500))#
summary(mxRun(factorModel))
source('http://openmx.psyc.virginia.edu/getOpenMx.R')
require(OpenMx)#
data(demoOneFactor)#
manifests <- names(demoOneFactor)#
latents <- c("G")#
factorModel <- mxModel("One Factor",#
      type="RAM",#
      manifestVars = manifests,#
      latentVars = latents,#
      mxPath(from=latents, to=manifests),#
      mxPath(from=manifests, arrows=2),#
      mxPath(from=latents, arrows=2,#
            free=FALSE, values=1.0),#
      mxData(cov(demoOneFactor), type="cov",#
            numObs=500))#
summary(mxRun(factorModel))
require(OpenMx)#
data(demoOneFactor)#
factorModel <- mxModel("One Factor",#
      mxMatrix("Full", 5, 1, values=0.2,#
           free=TRUE, name="A"),#
      mxMatrix("Symm", 1, 1, values=1,#
           free=FALSE, name="L"),#
      mxMatrix("Diag", 5, 5, values=1,#
           free=TRUE, name="U"),#
      mxAlgebra(A %*% L %*% t(A) + U, name="R"),#
      mxMLObjective("R", dimnames = names(demoOneFactor)),#
      mxData(cov(demoOneFactor), type="cov", numObs=500))#
summary(mxRun(factorModel))
setwd("/Volumes/Daten/FelixLindemann/Documents/git/HNUORToolsForRProject")#
# update package#
library(devtools)#
#
check()#
#
build()#
#
install()#
#
library("HNUORToolsForRProject")#
#
require("HNUORToolsForRProject")#
df<- data.frame(x= 10 , y= 20)#
#
node1 <- as(df,"HNUNode")#
node2 <- as.HNUNode(df)#
#
#demo(HNU.Node)#
#
# demo(HNU.Customer)
install()
install()
df<- data.frame(x= 10 , y= 20)#
#
node1 <- as(df,"HNUNode")#
node2 <- as.HNUNode(df)
build()
install()
check()
install()
check()
?setGeneric
standardGeneric
?standardGeneric
