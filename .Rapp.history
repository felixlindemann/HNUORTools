HNUCustomer()
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- as.numeric( sample(1:1000,1) )#
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 )#
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUWarehouse()
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, fixcosts = fixcosts, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUWarehouse()
x<-HNUWarehouse()
as.dataframe()
as data.frame(x)
as.data.frame(x)
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        data.frame(#
            id      = from@id,#
            label   = from@label, #
            x       = from@x, #
            y       = from@y#
        )#
    }#
)#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
x<- HNUNode()
x
as(x,"data.frame")
_id <- 2
d<-as(x,"data.frame")
d$a
ifnull(d$a)
?ifnull
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)#
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        tryCatch(#
        { #
            tmp.id = character()#
            tmp.label = character()#
            tmp.x = numeric()#
            tmp.y = numeric()#
#
            if(!is.null(from$id)){#
                tmp.id <- from$id#
            }#
            if(!is.null(from$label)){#
                tmp.label <- from$label#
            }#
            if(!is.null(from$x)){#
                tmp.x <- from$x#
            }#
            if(!is.null(from$y)){#
                tmp.y <- from$y#
            }#
#
            o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
        }, warning = function(w) {#
            cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    }#
)#
#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        tryCatch(#
        { #
            tmp.id = character()#
            tmp.label = character()#
            tmp.x = numeric()#
            tmp.y = numeric()#
#
            if(!is.null(from$id)){#
                tmp.id <- from$id#
            }#
            if(!is.null(from$label)){#
                tmp.label <- from$label#
            }#
            if(!is.null(from$x)){#
                tmp.x <- from$x#
            }#
            if(!is.null(from$y)){#
                tmp.y <- from$y#
            }#
#
            o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
        }, warning = function(w) {#
            cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    }#
)
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)#
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        o <- NA#
        tryCatch(#
            { #
                tmp.id = character()#
                tmp.label = character()#
                tmp.x = numeric()#
                tmp.y = numeric()#
#
                if(!is.null(from$id)){#
                    tmp.id <- from$id#
                }#
                if(!is.null(from$label)){#
                    tmp.label <- from$label#
                }#
                if(!is.null(from$x)){#
                    tmp.x <- from$x#
                }#
                if(!is.null(from$y)){#
                    tmp.y <- from$y#
                }#
#
                o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
            }, warning = function(w) {#
                cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(o)#
            } #
        )#
    }#
)#
#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
require("HNUORToolsForRProject")
require(OpenMx)#
data(demoOneFactor)#
manifests <- names(demoOneFactor)#
latents <- c("G")#
factorModel <- mxModel("One Factor",#
      type="RAM",#
      manifestVars = manifests,#
      latentVars = latents,#
      mxPath(from=latents, to=manifests),#
      mxPath(from=manifests, arrows=2),#
      mxPath(from=latents, arrows=2,#
            free=FALSE, values=1.0),#
      mxData(cov(demoOneFactor), type="cov",#
            numObs=500))#
summary(mxRun(factorModel))
source('http://openmx.psyc.virginia.edu/getOpenMx.R')
require(OpenMx)#
data(demoOneFactor)#
manifests <- names(demoOneFactor)#
latents <- c("G")#
factorModel <- mxModel("One Factor",#
      type="RAM",#
      manifestVars = manifests,#
      latentVars = latents,#
      mxPath(from=latents, to=manifests),#
      mxPath(from=manifests, arrows=2),#
      mxPath(from=latents, arrows=2,#
            free=FALSE, values=1.0),#
      mxData(cov(demoOneFactor), type="cov",#
            numObs=500))#
summary(mxRun(factorModel))
require(OpenMx)#
data(demoOneFactor)#
factorModel <- mxModel("One Factor",#
      mxMatrix("Full", 5, 1, values=0.2,#
           free=TRUE, name="A"),#
      mxMatrix("Symm", 1, 1, values=1,#
           free=FALSE, name="L"),#
      mxMatrix("Diag", 5, 5, values=1,#
           free=TRUE, name="U"),#
      mxAlgebra(A %*% L %*% t(A) + U, name="R"),#
      mxMLObjective("R", dimnames = names(demoOneFactor)),#
      mxData(cov(demoOneFactor), type="cov", numObs=500))#
summary(mxRun(factorModel))
setwd("/Volumes/Daten/FelixLindemann/Documents/git/HNUORToolsForRProject")#
# update package#
library(devtools)#
#
check()
check()
check()
build()
?check
check()
test8
test()
load()
load_all()
load_all()
check()
test()
demo(HNUNode01)
demo(HNU.Node.01)
demo("HNU.Node.01")
demo("HNU.Node01")
load_all()
demo("HNU.Node01")
setwd("/Volumes/Daten/FelixLindemann/Documents/git/HNUORToolsForRProject")#
# update package#
library(devtools)#
#
check()#
test()#
load_all()#
library("HNUORToolsForRProject")#
demo("HNU.Node01")#
demo("HNU.Node02")#
#
# build()#
#
# install()#
#
# library("HNUORToolsForRProject")#
#
# require("HNUORToolsForRProject")
x<- new("HNU.Node")
setwd("/Volumes/Daten/FelixLindemann/Documents/git/HNUORToolsForRProject")#
# update package#
library(devtools)#
#
check()#
test()#
load_all()#
library("HNUORToolsForRProject")#
demo("HNU.Node01")#
demo("HNU.Node02")#
#
# build()#
#
# install()#
#
# library("HNUORToolsForRProject")#
#
# require("HNUORToolsForRProject")
x<- new("HNU.Node")
setwd("/Volumes/Daten/FelixLindemann/Documents/git/HNUORToolsForRProject")#
# update package#
library(devtools)#
#
check()#
test()#
load_all()#
library("HNUORTools")#
demo("HNUNode01")#
demo("HNUNode02")#
#
# build()#
#
# install()#
#
# library("HNUORTools")#
#
# require("HNUORTools")
x
test()
df<- data.frame(x=10,y=20)#
#
node01 <- new("HNUNode", df)#
#
node02 <- as(df, "HNUNode")#
#
node03 <- as.HNUNode(df)#
#
node04 <- HNUNode.create(x= 10, y=20)
node01
node02
node03
node04
check()
check()
create a new Node with random values#
x<- new("HNUNode")#
x#
#
#create a new Node with specific values#
x<- new("HNUNode", x= 10, y=20, id="myid", label = "mylabel")#
x
test()
test()
test()
test_check()
test_package()
test_package()
test()
test()
node<- new("HNUNode", x= 10, y=20, id="myid", label = "mylabel")
expect_equal(node$x, 10)
node$x
test()
test()
node
names(node)
check()
test()
test()
test()
test()
node
as.data.frame(node)
as.list(node)
check()
c2<- new("HNUCustomer",id = "C02", label="Customer 02", x = 10, y= 20, demand = 10 )
c2<- new("HNUCustomer",id = "C02", label="Customer 02", x = 10, y= 20, demand = 10 )
check()
c2<- new("HNUCustomer",id = "C02", label="Customer 02", x = 10, y= 20, demand = 10 )
c2
check()
test()
check()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
check
check()
check()
check()
test()
?validObject
check()
test()
c1
c1<-new("HNUCustomer")
c1
c1$demand
c1$demand <- -1
c1
validObject(c1)
check()
c1c1<- HNUCustomer.create(showwarnings=FALSE)
c1<- HNUCustomer.create(showwarnings=FALSE)
c1$demand <- -10
test
test()
c1$demand <- -10
$#
setMethod("$","HNUCustomer",function(x,name) {return(slot(x,name))})#
#
setMethod("$<-","HNUCustomer",function(x,name,value) {#
  slot(x,name,check=TRUE) <- value#
  return(x)#
})
c1$demand <- -10
c1
validObject(c1)
is.HNUNode(c1)
test()
?setReplaceMehtod
?setReplaceMethod
?setReplaceMethod
c1<- HNUCustomer.create(demand = -10)
HNUCustomer.create
HNUCustomer.create()
load_all()
load_all()
c1<- HNUCustomer.create(demand = -10)
c1
c1@demand <- -10
c1$demand <- -10
$#
setMethod("$","HNUCustomer",function(x,name) {return(slot(x,name))})#
#
setMethod("$<-","HNUCustomer",function(x,name,value) {#
  slot(x,name,check=TRUE) <- value#
  return(x)#
})
c1$demand <- -10
slot(c1,"demand",check=T) <- -10
validObject(c1)
c1$demand <- 10
test()
check()
c1$demand <- -10
c1
check()
test
test()
c1
c1$demand<--10
?slot
c1$demand<-110
c1
check()
c1
c1$demand <- -100
c1@demand <- -100
?slot
slot
?slot
check()
c1
c1$demand <- 100
c1$demand <- -100
check()
load_all()
check()
load_all()
c1$demand <- 100
c1$demand <- -100
load_all()
build()
load_all()
c1$demand <- 100
c1$demand <- -100
check()
load_all()
c1$demand <- -100
c1
load_all()
c1$demand <- -100
load_all()
c1$demand <- -100
c1
setClass(#
	Class = "pnumeric",#
    contains = numeric,#
    validity = function(object) { #
        if(object < 0) {#
            return("Not a positive number") #
        }else{#
            return(TRUE)#
        } #
    } #
)
setClass(#
	Class = "pnumeric",#
    contains = numeric,#
    validity = function(object) { #
        if(object < 0) {#
            return("Not a positive number") #
        }else{#
            return(TRUE)#
        } #
    } #
)
setClass(#
	Class = "pnumeric",#
    contains = "numeric",#
    validity = function(object) { #
        if(object < 0) {#
            return("Not a positive number") #
        }else{#
            return(TRUE)#
        } #
    } #
)
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="pnumeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =pnumeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
#to-String(Method)#
setMethod ("show", "HNUCustomer", function(object){#
        cat("S4 class HNUCustomer:")#
        if(!is.null(object@demand)  ) {#
            cat("\tdemand: ", object@demand,"\n")#
        } #
        cat("########### properties for HNU Node ################\n")#
        callNextMethod(object)#
        cat("####################################################\n")#
    }#
) # end show method
pnumeric()
pnumeric
check()
c1<-new("HNUCustomer")
c
check()
check()
check()
value#
 setMethod("slot", "ANY", #
     function (object, name, value){ #
         object <- callNextMethod(object, name, value) #
         validObject(object) #
         return(object) #
     } #
)
setMethod("slot", "ANY", #
     function (object, name, value){ #
         object <- callNextMethod(object, name, value) #
         validObject(object) #
         return(object) #
     } #
)
setMethod("slot<-", "ANY", #
     function (object, name, value){ #
         object <- callNextMethod(object, name, value) #
         validObject(object) #
         return(object) #
     } #
)
?slot<-
x<-HNUNode.create()
x<-new(HNU)
check()
check()
check()
x<-new("HNUNode")
x
x$x<-c(10,20)
x$x <-10)
x$x <-10
x
x$y <- 1ß
x$y <- 10
check()
check()
check()
check()
x<-new("HNUNode")
x$x <-10
check()
x<-HNUCustomer.create()
check()
x<-HNUCustomer.create()
x<-HNUNode.create()
x
x$y <- c(12)
