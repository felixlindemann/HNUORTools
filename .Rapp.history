k<-x$Knoten
k
k$x
as.list(K)
as.list(k)
k[["x,"]]
k[["x",]]
k[[,x]]
k[[],x]
k[[],"x"]
k["x",[]]
k["x"]
k["x",]
k[["x"]]
k[[]]
k[[id]]
k[["id"]]
k[[]]$id
k[]$id
k[][]$id
k
class(k)
k$"a"
k$"x"
length(k)
lapply(k)
k[1:5]$x
k[1:5]
k[1:2]
k[1:2][[]]
k[1:2][]
k[1:2][]["x"]
k[1:2][][["x"]]
k[1]
k[[1]]
k[[1]]$x
k[[]]$x
k[[1:5]]$x
should work fine#
k1 <- new("HNUCustomer", x=12, y=10, label="myNode", id="N0001", demand = 30)#
k1
class(k1)
as.list(k1)
x
x$Knoten
x$Knoten[[1]]
x$Knoten[[]]
x$Knoten[[,"x"]]
x$Knoten[[,"x"]]()
try(throw("Division by zero."));
x$Knoten[[,"x"]]()
x$Knoten[["x"]]()
x$Knoten[["x"]]
x$Knoten[[1:4]]$x
sapply(x$Knoten, function(x){as.numeric(x)})
sapply(x$Knoten, function(x){x})
sapply(x$Knoten, function(x){x$x})
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plot = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y))#
      }#
      plot(x,y,xlim = xlim, ylim = ylim,xlab=xlab,ylab=ylab,main=main,pch=20)#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plot = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,xlim = xlim, ylim = ylim,xlab=xlab,ylab=ylab,main=main,pch=20)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
x$plot()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plot = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      methods::plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)
x$plot()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      base::plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plot()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      base::plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
#
      text(x,y, sapply(.self$Knoten, function(o){o$label}), cex=1,col=1)#
#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=1,col=1)#
#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
?pch
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
      points(x,y,pch = 1 , cex=2)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
?pch
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        x <- c(l$from$x, l$to$x)#
        y <- c(l$from$y, l$to$y)#
        lines(x,y,lty=1)#
      }#
#
      points(x,y,pch = 21 , cex=2)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        a <- c(l$from$x, l$to$x)#
        b <- c(l$from$y, l$to$y)#
        lines(a,b,lty=1)#
      }#
#
      points(x,y,pch = 21 , cex=2)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
?pch
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        a <- c(l$from$x, l$to$x)#
        b <- c(l$from$y, l$to$y)#
        lines(a,b,lty=1)#
      }#
#
      points(x,y,pch = 21,bg = "white" , cex=2)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        a <- c(l$from$x, l$to$x)#
        b <- c(l$from$y, l$to$y)#
        lines(a,b,lty=1)#
      }#
#
      points(x,y,pch = 21,bg = "white" , cex=3)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.5,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
HNU.GeografischeSituation <- setRefClass("HNU.GeografischeSituation",#
  fields = list( #
    Knoten   = "list",#
    Kanten   = "list",#
    Kunden   = "list",#
    Lager    = "list"#
  ),#
  methods = list(#
    isValid = function(){#
      return(TRUE)#
    },#
    initRandomKnoten = function(n, seed = 1){#
      set.seed(seed)#
      .self$Knoten <- list()#
      for(i in 1:n){#
        k <- HNU.Knoten$new(#
          id = paste("k",i,sep=""),#
          x = runif(1,0,100),#
          y = runif(1,0,100),#
          label = paste("Knoten",i)#
        )#
        .self$addKnoten(k)#
      }#
    },#
    addKnoten = function(knoten){#
      if(missing(knoten)){#
        simpleError(paste("Fehler. Das Argument 'knoten' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Knoten[[length(.self$Knoten)+1]] <- knoten #
    },#
    addKante = function(i,j,Kostensatz=1,oneway=FALSE){#
      if(missing(i)){#
        simpleError(paste("Fehler. Das Argument 'from' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      if(missing(j)){#
        simpleError(paste("Fehler. Das Argument 'to' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      l1 <- HNU.Kante$new(#
        from = .self$Knoten[[i]],#
        to   = .self$Knoten[[j]],#
        oneWay = oneway#
      )#
      l1$setDistance(Kostensatz)#
      .self$Kanten[[length(.self$Kanten)+1]] <- l1  #
    },#
    addKunde = function(kunde){#
      if(missing(kunde)){#
        simpleError(paste("Fehler. Das Argument 'kunde' fehlt. Die Operation ist daher nicht möglich."))#
      } #
      .self$Kunden[[length(.self$Kunden)+1]] <- kunde #
    },#
    addLager = function(lager){#
      if(missing(lager)){#
        simpleError(paste("Fehler. Das Argument 'lager' fehlt. Die Operation ist daher nicht möglich."))#
      }#
      .self$Lager[[length(.self$Lager)+1]] <- lager #
    }, #
    plotGeoSituation = function(xlim,ylim,xlab="",ylab="",main=""){#
      x <- sapply(.self$Knoten, function(o){o$x})#
      y <- sapply(.self$Knoten, function(o){o$y})#
      if(missing(xlim )){#
        xlim <- range(x)#
      }#
      if(missing(ylim )){#
        ylim <- range(y)#
      }#
      plot(x,y,pch=20, #
          xlim = xlim, #
          ylim = ylim,#
          xlab=xlab,#
          ylab=ylab,#
          main=main#
      )#
      #Draw links#
      for(i in 1:length(Kanten)){#
#
        l <- Kanten[[i]]#
#
        a <- c(l$from$x, l$to$x)#
        b <- c(l$from$y, l$to$y)#
        lines(a,b,lty=1)#
      }#
#
      points(x,y,pch = 21,bg = "white" , cex=3)#
#
      text(x,y, sapply(.self$Knoten, function(o){o$id}), cex=.6,col=1)#
#
    },#
    drawCustomer = function(customer,#
      zoom=.5,#
      bg.col="gray",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,-0.5,1,2.5,2,2,0)-1)*zoom + customer$x#
      dy<-(c(0,2,2,3.5,2,2,0,0)-1.5) *zoom + customer$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(customer$x,customer$y,pch=point.pch,cex=point.cex )#
      text(max(dx),min(dy)-1*zoom, customer$label, cex=font.cex,col=font.col)#
    },#
    drawWarehouse = function(warehouse,#
      zoom=.5,#
      bg.col="white",#
      border.col="black",#
      font.cex=1,#
      font.col="black",#
      point.pch=20,#
      point.cex=1)#
    {#
      dx<-(c(0,0,1,1,2,2,3,3,4,4,5,5,0)-2.5)*zoom+warehouse$x#
      dy<-(c(0,3.5,2,3.5,2,3.5,2,3.5,2,5,5,0,0)-1.5)*zoom+warehouse$y#
#
      polygon(dx, dy, col=bg.col, border = border.col)#
      points(warehouse$x,warehouse$y,pch=point.pch ,cex=point.cex)#
      text(max(dx),min(dy)-1*zoom, warehouse$label, cex=font.cex,col=font.col)#
    }#
  )#
)#
#
x<-HNU.GeografischeSituation$new()#
#
x$initRandomKnoten(5)#
#
x$addKante(1,2)#
x$addKante(1,3)#
x$addKante(2,3)#
x$addKante(2,4)#
x$addKante(3,4)#
x$addKante(4,5)#
#
x$plotGeoSituation()
character()
numeric(0)
.ls.objects()
ls
ls.objects()
ls
ls()
?ls
myfunc <- function() {y <- 1; ls()}#
myfunc()                # shows "y"
objects()
ls()
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
#
    # Can be defined in a separate step using setValidity#
        if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
            return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
        } else if(class(object@demand)!="numeric") {#
            return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
        } else if(length(object@demand)!=1){ #
            return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
                  length(object@demand), " --> no arrays supported here"))         #
        } else if(object@demand<0){ #
            return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                         " --> no negative values supported here"))         #
        } else{ #
            return(TRUE)#
        }#
    }#
#
}#
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=character(),#
            x = numeric(),#
            y = numeric(),#
            label = character() #
    	)#
    )#
)#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=character(),#
            x = numeric(),#
            y = numeric(),#
            label = character() #
    	)#
    )#
)#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id)){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x)){#
                x<-runif(1,0,100)#
            }#
            if(missing(y)){#
                y<-runif(1,0,100)#
            }#
            if(missing(label)){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o)#
            return(o)#
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w))#
            return NA           #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setClass(#
	Class="HNUNode",#
    representation=representation(#
    	id="character",#
    	x="numeric",#
    	y="numeric",#
    	label="character"#
    ),#
    prototype=prototype(#
    	list(#
    		id=character(),#
            x = numeric(),#
            y = numeric(),#
            label = character() #
    	)#
    )#
)#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id)){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x)){#
                x<-runif(1,0,100)#
            }#
            if(missing(y)){#
                y<-runif(1,0,100)#
            }#
            if(missing(label)){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
x<-HNUNode()
x
x<-HNUNode(x=20)
x
is.HNUNode(x)
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- sample(1:1000,1) #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = n@demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
numeric()
missing(numeric())
y<-numeric()
missing(y)
length(y)
length(y) ==0
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- sample(1:1000,1) #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = n@demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- sample(1:1000,1) #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
setClass(#
    Class="HNUCustomer",#
    representation=representation(#
        demand="numeric"#
    ),#
    prototype=prototype(#
        list(#
            demand =numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUCustomer.valid <- function(object){#
    if( sum(is.null(object@demand)) + sum( is.na(object@demand)) > 0 ) {#
        return(paste("Error with value demand: demand is not initialized", class(object@demand)))#
    } else if(class(object@demand)!="numeric") {#
        return(paste("Error with value demand: expected numeric datatype, but obtained", class(object@demand))) #
    } else if(length(object@demand)!=1){ #
        return(paste("Error with value demand: expected numeric data of length 1, but obtained", #
              length(object@demand), " --> no arrays supported here"))         #
    } else if(object@demand<0){ #
        return(paste("Error with value demand: expected is a non negative value, but obtained", (object@demand), #
                     " --> no negative values supported here"))         #
    } else{ #
        return(TRUE)#
    }#
} #
setValidity("HNUCustomer", .HNUCustomer.valid)#
is.HNUCustomer <- function(x){is(x,"HNUCustomer")}#
# Userfriendly function#
HNUCustomer <- function(x = numeric(), y = numeric(), demand = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(demand)){#
                demand <- as.numeric( sample(1:1000,1) )#
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUCustomer", id = n@id, x = n@x, y = n@y, demand = demand, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Customer: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Customer: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUCustomer()
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 )#
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUWarehouse()
setClass(#
    Class="HNUWarehouse",#
    representation=representation(#
        supply="numeric",#
        fixcosts="numeric"#
    ),#
    prototype=prototype(#
        list(#
            supply =numeric(),#
            fixcosts = numeric()#
        )#
    ),#
    contains="HNUNode"#
)#
#
.HNUWarehouse.valid <- function(object) {  #
           if( sum(is.null(object@fixcosts)) + sum( is.na(object@fixcosts)) > 0 ) {#
        return(paste("Error with value fixcosts: fixcosts is not initialized", class(object@fixcosts)))#
    } else if(class(object@fixcosts)!="numeric") {#
        return(paste("Error with value fixcosts: expected numeric datatype, but obtained", class(object@fixcosts))) #
    } else if(length(object@fixcosts)!=1){ #
        return(paste("Error with value fixcosts: expected numeric data of length 1, but obtained", #
              length(object@fixcosts), " --> no arrays supported here"))         #
    } else if(object@fixcosts<0){ #
        return(paste("Error with value fixcosts: expected is a non negative value, but obtained", (object@fixcosts), #
                     " --> no negative values supported here"))         #
    } else if( sum(is.null(object@supply)) + sum( is.na(object@supply)) > 0 ) {#
        return(paste("Error with value supply: supply is not initialized", class(object@supply)))#
    } else if(class(object@supply)!="numeric") {#
        return(paste("Error with value supply: expected numeric datatype, but obtained", class(object@supply))) #
    } else if(length(object@supply)!=1){ #
        return(paste("Error with value supply: expected numeric data of length 1, but obtained", #
              length(object@supply), " --> no arrays supported here"))         #
    } else if(object@supply<0){ #
        return(paste("Error with value supply: expected is a non negative value, but obtained", (object@supply), #
                     " --> no negative values supported here"))#
    } else {#
        return(TRUE)#
    }#
}#
#
setValidity("HNUWarehouse", .HNUWarehouse.valid)#
is.HNUWarehouse <- function(x){is(x,"HNUWarehouse")}#
# Userfriendly function#
HNUWarehouse <- function(x = numeric(), y = numeric(), supply = numeric(), fixcosts = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(supply) | length(supply) != 1){#
                supply <- as.numeric( sample(1:1000,1) )#
            }#
            if(missing(fixcosts) | length(fixcosts) != 1){#
                fixcosts <- 0 #
            }#
            n <- HNUNode( id = id, x = x, y = y, label = label)  #
            o <- new("HNUWarehouse", id = n@id, x = n@x, y = n@y, supply = supply, fixcosts = fixcosts, label = n@label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Warehouse: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Warehouse: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
HNUWarehouse()
x<-HNUWarehouse()
as.dataframe()
as data.frame(x)
as.data.frame(x)
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        data.frame(#
            id      = from@id,#
            label   = from@label, #
            x       = from@x, #
            y       = from@y#
        )#
    }#
)#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
x<- HNUNode()
x
as(x,"data.frame")
_id <- 2
d<-as(x,"data.frame")
d$a
ifnull(d$a)
?ifnull
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)#
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        tryCatch(#
        { #
            tmp.id = character()#
            tmp.label = character()#
            tmp.x = numeric()#
            tmp.y = numeric()#
#
            if(!is.null(from$id)){#
                tmp.id <- from$id#
            }#
            if(!is.null(from$label)){#
                tmp.label <- from$label#
            }#
            if(!is.null(from$x)){#
                tmp.x <- from$x#
            }#
            if(!is.null(from$y)){#
                tmp.y <- from$y#
            }#
#
            o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
        }, warning = function(w) {#
            cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    }#
)#
#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        tryCatch(#
        { #
            tmp.id = character()#
            tmp.label = character()#
            tmp.x = numeric()#
            tmp.y = numeric()#
#
            if(!is.null(from$id)){#
                tmp.id <- from$id#
            }#
            if(!is.null(from$label)){#
                tmp.label <- from$label#
            }#
            if(!is.null(from$x)){#
                tmp.x <- from$x#
            }#
            if(!is.null(from$y)){#
                tmp.y <- from$y#
            }#
#
            o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
        }, warning = function(w) {#
            cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    }#
)
setClass(#
	Class = "HNUNode",#
    representation=representation(#
    	id     = "character",#
    	x      = "numeric",#
    	y      = "numeric",#
    	label  = "character"#
    ),#
    prototype=prototype(#
    	list(#
    		id    = character(),#
            x     = numeric(),#
            y     = numeric(),#
            label = character() #
    	)#
    )#
)#
#
.HNUNode.valid <- function(object){#
               if( sum(is.null(object@x)) + sum( is.na(object@x)) > 0 ) {#
            return(paste("Error with value x: Value is not initialized", class(object@x)))#
        } else if( sum(is.null(object@y)) + sum( is.na(object@y)) > 0) {#
            return(paste("Error with value y: Value is not initialized", class(object@y)))#
        } else if( class(object@x)!="numeric" ) {#
            return(paste("Error with value x: expected numeric datatype, but obtained", class(object@x)))#
        } else if( class(object@y)!="numeric" ) {#
            return(paste("Error with value y: expected numeric datatype, but obtained", class(object@y)))#
        } else if( length(object@x)!=1 ){ #
            return(paste("Error with value x: expected numeric data of length 1, but obtained", length(object@x), " --> no arrays supported here"))#
        } else if( length(object@y)!=1 ){ #
            return(paste("Error with value y: expected numeric data of length 1, but obtained", length(object@y), " --> no arrays supported here"))#
        } else{ #
            return(TRUE)#
        }#
}#
setValidity("HNUNode", .HNUNode.valid)#
is.HNUNode <- function(x){is(x,"HNUNode")}#
setAs(#
    "HNUNode", #
    "data.frame", #
    function(from) {#
        df <- data.frame()#
        tryCatch(#
            {#
            df <- data.frame(#
                id      = from@id,#
                label   = from@label, #
                x       = from@x, #
                y       = from@y#
            )#
            return(df)#
            }, warning = function(w) {#
                cat(paste("Create Dataframe from Node: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Dataframe from Node: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(df)#
            }#
        )#
    }#
)#
setAs(#
    "data.frame", #
    "HNUNode", #
    function(from) {#
        o <- NA#
        tryCatch(#
            { #
                tmp.id = character()#
                tmp.label = character()#
                tmp.x = numeric()#
                tmp.y = numeric()#
#
                if(!is.null(from$id)){#
                    tmp.id <- from$id#
                }#
                if(!is.null(from$label)){#
                    tmp.label <- from$label#
                }#
                if(!is.null(from$x)){#
                    tmp.x <- from$x#
                }#
                if(!is.null(from$y)){#
                    tmp.y <- from$y#
                }#
#
                o <- HNUNode(x = tmp.x,y = tmp.y, id = tmp.id, label = tmp.label)#
            }, warning = function(w) {#
                cat(paste("Create Node from Dataframe: Unerwartete Warnung:\n", w)) #
            }, error   = function(e) {#
                cat(paste("Create Node from Dataframe: Unerwarteter Fehler:\n", e)) #
                stop(e)#
            }, finally = { #
                return(o)#
            } #
        )#
    }#
)#
#
# Userfriendly function#
HNUNode <- function(x = numeric(),y = numeric(), id = character(), label = character()){#
    tryCatch(#
        {#
            o <- NA#
            if(missing(id) | length(id) == 0 ){#
                id <- paste("n",sample(1:1000,1),sep="")#
            }#
            if(missing(x) | length(x) == 0 ){#
                x<-runif(1,0,100)#
            }#
            if(missing(y) | length(y) == 0 ){#
                y<-runif(1,0,100)#
            }#
            if(missing(label) | length(label) == 0 ){#
                label <- id#
            }  #
            o <- new("HNUNode", id = id, x = x, y = y, label = label) #
            isvalid <- validObject(o) #
        }, warning = function(w) {#
            cat(paste("Create Node: Unerwartete Warnung:\n", w)) #
        }, error   = function(e) {#
            cat(paste("Create Node: Unerwarteter Fehler:\n", e)) #
            stop(e)#
        }, finally = { #
            return(o)#
        } #
    ) #
}
require("HNUORToolsForRProject")
require(OpenMx)#
data(demoOneFactor)#
manifests <- names(demoOneFactor)#
latents <- c("G")#
factorModel <- mxModel("One Factor",#
      type="RAM",#
      manifestVars = manifests,#
      latentVars = latents,#
      mxPath(from=latents, to=manifests),#
      mxPath(from=manifests, arrows=2),#
      mxPath(from=latents, arrows=2,#
            free=FALSE, values=1.0),#
      mxData(cov(demoOneFactor), type="cov",#
            numObs=500))#
summary(mxRun(factorModel))
source('http://openmx.psyc.virginia.edu/getOpenMx.R')
require(OpenMx)#
data(demoOneFactor)#
manifests <- names(demoOneFactor)#
latents <- c("G")#
factorModel <- mxModel("One Factor",#
      type="RAM",#
      manifestVars = manifests,#
      latentVars = latents,#
      mxPath(from=latents, to=manifests),#
      mxPath(from=manifests, arrows=2),#
      mxPath(from=latents, arrows=2,#
            free=FALSE, values=1.0),#
      mxData(cov(demoOneFactor), type="cov",#
            numObs=500))#
summary(mxRun(factorModel))
require(OpenMx)#
data(demoOneFactor)#
factorModel <- mxModel("One Factor",#
      mxMatrix("Full", 5, 1, values=0.2,#
           free=TRUE, name="A"),#
      mxMatrix("Symm", 1, 1, values=1,#
           free=FALSE, name="L"),#
      mxMatrix("Diag", 5, 5, values=1,#
           free=TRUE, name="U"),#
      mxAlgebra(A %*% L %*% t(A) + U, name="R"),#
      mxMLObjective("R", dimnames = names(demoOneFactor)),#
      mxData(cov(demoOneFactor), type="cov", numObs=500))#
summary(mxRun(factorModel))
setwd("/Volumes/Daten/FelixLindemann/Documents/git/HNUORToolsForRProject")#
# update package#
library(devtools)#
#
check()#
test()
setwd("/Volumes/Daten/FelixLindemann/Documents/git/HNUORToolsForRProject")#
# update package#
library(devtools)#
#
check()#
test()
n1<- HNUNode.create(x=10, y=20)#
n2<- HNUNode.create(x=13, y=24)#
n3<- new("HNUNode", x=7, y=16)#
n4<- new("HNUNode", x=7, y=20)
n1<- HNUNode.create(x=10, y=20)#
n2<- HNUNode.create(x=13, y=24)#
n3<- new("HNUNode", x=7, y=16)#
n4<- new("HNUNode", x=7, y=20)
l1 <- HNULink.create(n1,n2)#
	l2 <- HNULink.create(n1,n3)#
	l3 <- HNULink.create(n1,n4)#
	l4 <- HNULink.create(n3,n4)
l1
expect_true(l1$distance == 5)#
	expect_true(l2$distance == 5)#
	expect_true(l3$distance == 3)#
	expect_true(l4$distance == 4)
l1$distance == 5
geo<-HNUGeoSituation.create()
geo<-add(geo,new("HNUNode"))#
  	expect_true(length(geo$nodes) == 1)
?add
setGeneric("add", function(object,value,...))
setGeneric("add", function(object,value,...))
?setGeneric
setwd("/Volumes/Daten/FelixLindemann/Documents/git/HNUORToolsForRProject")#
# update package#
library(devtools)#
#
check()#
test()
geo<-HNUGeoSituation.create()
geo<-add2geo(geo,new("HNUNode"))
?setGeneric
setGeneric("add2geo",#
    function(object,value,...) {#
      value <- standardGeneric("add2geo")#
      return (value)#
      })
setMethod("add2geo",signature(object="HNUGeoSituation", value="HNUNode"),#
	function(object,value,...){#
		if(validObject(value) & is.HNUNode(value)){#
			n<- length(object@nodes)+1#
			object@nodes[[n]] <- value#
		} #
	    return(object)#
	}#
)
geo<-add2geo(geo,new("HNUNode"))#
  	expect_true(length(geo$nodes) == 1)
geo
expect_true(length(geo$nodes) == 1)
geo
expect_true(length(geo$nodes) == 1)
length(geo$nodes)
length(geo@nodes)
load_all()
test()
geo<-HNUGeoSituation.create()
geo<-add2geo(geo,new("HNUNode"))
geo
geo$nodes
expect_true(length(geo$nodes) == 1)
length(geo$nodes)
length(geo@nodes)
li<-geo$nodes
li
load_all()
geo<-HNUGeoSituation.create()
geo
geo<-add2geo(geo,new("HNUNode"))
geo
test()
check
check()
test()
test()
as.logical(1)
as.logical(0)
?switch
?regexp
?upper
?upper.case
fields<- c("ANY", "Customers", "Warehouses", "Nodes")#
		pmatch("customers",   fields) # returns NA
pmatch("Customers",   fields)
?pmatch
?agrep
fields<- c("ANY", "Customers", "Warehouses", "Nodes")#
		agrep("cust", fields, max = 1, ignore.case = TRUE)
fields<- c("ANY", "Customers", "Warehouses", "Nodes")#
		agrep("a", fields, max = 1, ignore.case = TRUE)
fields<- c("ANY", "Customers", "Warehouses", "Nodes")#
		agrep("z", fields, max = 1, ignore.case = TRUE)
?agrep
agrep("lasy", "1 lazy 2")#
agrep("lasy", c(" 1 lazy 2", "1 lasy 2"), max = list(sub = 0))#
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max = 2)#
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max = 2, value = TRUE)#
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max = 2, ignore.case = TRUE)
txt <- "a test of capitalizing"#
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)#
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
x <- c("A and B", "A, B and C", "A, B, C and D", "foobar")#
pattern <- "[[:space:]]*(,|and)[[:space:]]"#
## Match data from regexpr()#
m <- regexpr(pattern, x)#
regmatches(x, m)#
regmatches(x, m, invert = TRUE)#
## Match data from gregexpr()#
m <- gregexpr(pattern, x)#
regmatches(x, m)#
regmatches(x, m, invert = TRUE)
fields<- c("ANY", "Customers", "Warehouses", "Nodes")#
		regexpr("cust", fields)
agrep("z", fields, max = 1, ignore.case = TRUE)
agrep("cust", fields, max = 1, ignore.case = TRUE)
agrep("t", fields, max = 1, ignore.case = TRUE)
agrep("an", fields, max = 1, ignore.case = TRUE)
agrep("any", fields, max = 1, ignore.case = TRUE)
agrep("ware", fields, max = 1, ignore.case = TRUE)
agrep("cust", fields, max = 1, ignore.case = TRUE)
?cases
check()
check()
check()
check()
check()
check()
check()
check()
test()
check()
test()
check()
test()
geo<-HNUGeoSituation.create()#
  geo<-add(geo,new("HNUWarehouse", id="L1", x=25,   y=70,   supply = 350   ))#
  geo<-add(geo,new("HNUWarehouse", id="L2", x=150,  y=115,  supply = 450   ))#
  geo<-add(geo,new("HNUWarehouse", id="L3", x=80,   y=140,  supply = 300   ))#
  geo<-add(geo,new("HNUWarehouse", id="L4", x=160,  y=10,   supply = 120   ))#
  geo<-add(geo,new("HNUCustomer",  id="K1", x=15,   y=130,  demand = 150   ))#
  geo<-add(geo,new("HNUCustomer",  id="K2", x=60,   y=80,   demand = 300   ))#
  geo<-add(geo,new("HNUCustomer",  id="K3", x=175,  y=140,  demand = 180   ))#
  geo<-add(geo,new("HNUCustomer",  id="K4", x=50,   y=100,  demand = 120   ))#
  geo<-add(geo,new("HNUCustomer",  id="K5", x=30,   y=40,   demand = 100   ))#
  geo<-add(geo,new("HNUCustomer",  id="K6", x=140,  y=80,   demand = 40    ))#
  geo<-add(geo,new("HNUCustomer",  id="K7", x=100,  y=15,   demand = 80    ))#
  geo<-add(geo,new("HNUCustomer",  id="K8", x=155,  y=55,   demand = 120   ))#
  geo<-add(geo,new("HNUCustomer",  id="K9", x=125,  y=145,  demand = 130   ))#
#
  m<-getDistanceMatrix(geo,"warehouse", "customer")
colnames(m)
colnames(m) <- paste("K",1:9, sep ="")
rownames(m) <- paste("L",1:4, sep="")
m
round(m)
expect_true(round(m[2,4] + round(m[3,5] + round(m[4,2]) == 335)
expect_true(round(m[2,4]) + round(m[3,5]) + round(m[4,2]) == 335)
expect_true(round(m[2,4]) + round(m[3,5]) + round(m[4,2]) == 335)
build()
load_all()
test()
load_all()
test8
test()
load_all()
test()
m
geo<-HNUGeoSituation.create()#
  geo<-add(geo,new("HNUWarehouse", id="L1", x=25,   y=70,   supply = 350   ))#
  geo<-add(geo,new("HNUWarehouse", id="L2", x=150,  y=115,  supply = 450   ))#
  geo<-add(geo,new("HNUWarehouse", id="L3", x=80,   y=140,  supply = 300   ))#
  geo<-add(geo,new("HNUWarehouse", id="L4", x=160,  y=10,   supply = 120   ))#
  geo<-add(geo,new("HNUCustomer",  id="K1", x=15,   y=130,  demand = 150   ))#
  geo<-add(geo,new("HNUCustomer",  id="K2", x=60,   y=80,   demand = 300   ))#
  geo<-add(geo,new("HNUCustomer",  id="K3", x=175,  y=140,  demand = 180   ))#
  geo<-add(geo,new("HNUCustomer",  id="K4", x=50,   y=100,  demand = 120   ))#
  geo<-add(geo,new("HNUCustomer",  id="K5", x=30,   y=40,   demand = 100   ))#
  geo<-add(geo,new("HNUCustomer",  id="K6", x=140,  y=80,   demand = 40    ))#
  geo<-add(geo,new("HNUCustomer",  id="K7", x=100,  y=15,   demand = 80    ))#
  geo<-add(geo,new("HNUCustomer",  id="K8", x=155,  y=55,   demand = 120   ))#
  geo<-add(geo,new("HNUCustomer",  id="K9", x=125,  y=145,  demand = 130   ))#
#
  m<-getDistanceMatrix(geo,"warehouse", "customer")#
  m<-round(m)#
  expect_true(length(geo$warehouses) ==4)#
  expect_true(length(geo$customers) ==9)#
#
  expect_true(nrow(m) ==4)#
  expect_true(ncol(m) ==9)#
#
  expect_true(m[1,1] == 61)#
  expect_true(m[1,2] == 36)#
  expect_true(m[3,4] == 50)#
  expect_true(m[4,6] == 73)#
  expect_true(m[2,4] + m[3,5] + m[4,2] == 335)
m
load_all()
demo(HNUTPP01)
m
